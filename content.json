{"meta":{"title":"summerain0的个人博客","subtitle":"","description":"这是summerain0的个人博客","author":"summerain0","url":"https://summerain0.github.io","root":"/"},"pages":[{"title":"友情链接","date":"2022-09-02T11:10:49.102Z","updated":"2022-09-02T11:10:49.102Z","comments":true,"path":"friends/index.html","permalink":"https://summerain0.github.io/friends/index.html","excerpt":"","text":""},{"title":"","date":"2022-09-02T09:13:11.594Z","updated":"2022-09-02T09:13:11.594Z","comments":true,"path":"about/index.html","permalink":"https://summerain0.github.io/about/index.html","excerpt":"","text":""},{"title":"","date":"2022-09-02T10:04:36.710Z","updated":"2022-09-02T10:04:36.710Z","comments":true,"path":"404.html","permalink":"https://summerain0.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2022-09-02T09:13:40.433Z","updated":"2022-09-02T09:13:40.433Z","comments":true,"path":"categories/index.html","permalink":"https://summerain0.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2022-09-02T09:13:59.927Z","updated":"2022-09-02T09:13:59.927Z","comments":true,"path":"tags/index.html","permalink":"https://summerain0.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2022-09-02T09:14:28.678Z","updated":"2022-09-02T09:14:28.678Z","comments":true,"path":"mylist/index.html","permalink":"https://summerain0.github.io/mylist/index.html","excerpt":"","text":""}],"posts":[{"title":"Android Material Design全面解析（一）- MaterialButton篇","slug":"material-design-materialbutton","date":"2022-09-04T06:21:39.000Z","updated":"2022-09-04T08:02:13.615Z","comments":true,"path":"2022/09/04/material-design-materialbutton/","link":"","permalink":"https://summerain0.github.io/2022/09/04/material-design-materialbutton/","excerpt":"","text":"前言本系列将要介绍Material design库包含的所有控件，当前文章基于 com.google.android.material:material:1.2.1 讲解 MaterialButtonWhat is MaterialButton?MaterialButton是Google于SDK28推出的新控件，当遇到按钮需要圆角、或者描边等，就不必使用xml文件或者Github上找第三方库实现。 MaterialButtonhttps://developer.android.google.cn/reference/com/google/android/material/button/MaterialButton 效果图 实际运用效果如图片最后一个按钮 123456789101112&lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;150dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;后置着色&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; app:cornerRadius=&quot;10dp&quot; app:icon=&quot;@drawable/ic_android_black_24dp&quot; app:iconGravity=&quot;textEnd&quot; app:iconTint=&quot;#ff0000&quot; /&gt; 啥？闪退了？那就删除吧 关于闪退问题在v1.1.0以后，使用MD控件可能会出现闪退的问题，原因是未将theme设置为MaterialComponents，解决方法如下： 方法一在控件中添加 1android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; 即可解决 方法二123&lt;style name=&quot;MaterialComponents_Theme&quot; parent=&quot;Theme.MaterialComponents.Light.NoActionBar&quot;&gt;...&lt;/style&gt; 然后设置App主题为@style&#x2F;MaterialComponents_Theme即可 常见问题关于Backgroundnote quote All attributes from MaterialButton are supported. Do not use the android:background attribute. MaterialButton manages its own background drawable, and setting a new background means MaterialButton can no longer guarantee that the new attributes it introduces will function properly. If the default background is changed, MaterialButton cannot guarantee well-defined behavior. 大意就是不可以使用android:background设置背景，会破坏MaterialButton本身的绘制，而设置背景则推荐使用app:backgroundTint 关于insetTop、insetBottomMaterialButton创建后，按钮实际长度并不是设定值，因为它上下有留空，可以使用 12android:insetBottom=&quot;0dp&quot;android:insetTop=&quot;0dp&quot; 去除。 去除阴影MD控件默认有阴影效果，但是有时候我们并不想要按钮有阴影，那么这时候可以指定style为 1style=&quot;@style/Widget.MaterialComponents.Button.UnelevatedButton&quot; 这样就能去掉阴影，让视图看起来扁平化。 公开属性 属性 描述 参数 app:backgroundTint 背景着色 默认为?attr&#x2F;colorPrimary app:backgroundTintMode 着色模式 add,multiply,screen,src_atop,src_in,src_over app:strokeColor 描边颜色 app:strokeWidth 描边宽度 app:cornerRadius 圆角大小 app:rippleColor 按压水波纹颜色 app:icon 图标icon app:iconSize 图标大小 app:iconGravity 图标重心 start,end.textStart,textEnd app:iconTint 图标着色 app:iconTintMode 图标着色模式 add,multiply,screen,src_atop,src_in,src_over app:iconPadding 图标和文本之间的间距 项目完整源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center&quot; android:orientation=&quot;vertical&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;普通按钮&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Material&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;150dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;圆角 10dp&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; app:cornerRadius=&quot;10dp&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;150dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;描边 2dp&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; app:strokeColor=&quot;#ff0000&quot; app:strokeWidth=&quot;2dp&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;150dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;图标&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; app:cornerRadius=&quot;10dp&quot; app:icon=&quot;@drawable/ic_android_black_24dp&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;150dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;后置着色&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; app:cornerRadius=&quot;10dp&quot; app:icon=&quot;@drawable/ic_android_black_24dp&quot; app:iconGravity=&quot;textEnd&quot; app:iconTint=&quot;#ff0000&quot; /&gt;&lt;/LinearLayout&gt; MaterialButtonToggleGroup什么是MaterialButtonToggleGroup？类似一个LinearLayout，但只能添加MaterialButton，只有第一个子元素的最左边角和最后一个子元素的最右边角才能保留它们的形状外观或角大小，类似于iOS中的SegmentedControl，用户可以从组中选择一个或多个选项。 MaterialButtonhttps://developer.android.google.cn/reference/com/google/android/material/button/MaterialButtonToggleGroup 举个栗子布局源码12345678910111213141516171819202122232425262728293031323334&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;com.google.android.material.button.MaterialButtonToggleGroup xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/toggleGroup&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; app:checkedButton=&quot;@id/btn1&quot; app:singleSelection=&quot;true&quot;&gt; &lt;com.google.android.material.button.MaterialButton android:id=&quot;@+id/btn1&quot; style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;选项一&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:id=&quot;@+id/btn2&quot; style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;选项二&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:id=&quot;@+id/btn3&quot; style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;选项三&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; /&gt;&lt;/com.google.android.material.button.MaterialButtonToggleGroup&gt; 监听方法1234567MaterialButtonToggleGroup materialButtonToggleGroup = findViewById(R.id.toggleGroup);materialButtonToggleGroup.addOnButtonCheckedListener(new MaterialButtonToggleGroup.OnButtonCheckedListener() &#123; @Override public void onButtonChecked(MaterialButtonToggleGroup group, int checkedId, boolean isChecked) &#123; Toast.makeText(MainActivity.this, &quot;ID：&quot; + checkedId + &quot;, checked：&quot; + isChecked, Toast.LENGTH_SHORT).show(); &#125;&#125;); 公开属性 属性 描述 参数 app:checkedButton 默认选中 按钮ID app:singleSelection 是否单项选择 true&#x2F;false app:selectionRequired 设置为true后，强制至少选中一个 true&#x2F;false","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"教程/Android","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/Android/"},{"name":"Material Design","slug":"教程/Android/Material-Design","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/Android/Material-Design/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://summerain0.github.io/tags/Android/"},{"name":"Material Design","slug":"Material-Design","permalink":"https://summerain0.github.io/tags/Material-Design/"},{"name":"Button","slug":"Button","permalink":"https://summerain0.github.io/tags/Button/"}]},{"title":"Android自定义全局异常捕获——Activity形式","slug":"activity-uncaught-exception","date":"2022-09-03T15:57:30.000Z","updated":"2022-09-03T16:16:40.283Z","comments":true,"path":"2022/09/03/activity-uncaught-exception/","link":"","permalink":"https://summerain0.github.io/2022/09/03/activity-uncaught-exception/","excerpt":"","text":"前言开发安卓的小伙伴都遇到过APP突然崩溃,无响应的情况.如果发生在自己手中,那么还可以通过IDE查看错误日志,但是实际都是发生在用户手中,那么这个时候产生崩溃,无响应ANR异常就很麻烦.无从下手.因此,需要全局异常捕获.也就是对未知异常,程序员没有处理的异常进行处理,记录等便于分析查找原因，而一个美观的崩溃提示则可以大大加分 。 效果展示效果展示 源码MyUncaughtExceptionHandler.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152import android.content.Context;import android.content.Intent;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Build;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintWriter;import java.io.StringWriter;import java.io.Writer;import java.lang.reflect.Field;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.Locale;/** * @ClassName MyUncaughtExceptionHandler * @Description 全局捕捉异常 * @Author summerain0 * @Date 2020/9/11 15:31 */public class MyUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler &#123; // 单例 private static MyUncaughtExceptionHandler myUncaughtExceptionHandler; // 上下文 private Context context; // 会输出到文件中 private StringBuilder stringBuilder; // 系统异常处理器 private Thread.UncaughtExceptionHandler defaultUncaughtExceptionHandler; public MyUncaughtExceptionHandler(Context context) &#123; this.context = context; &#125; // 获取单例 public static synchronized MyUncaughtExceptionHandler getInstance(Context ctx) &#123; if (myUncaughtExceptionHandler == null) &#123; myUncaughtExceptionHandler = new MyUncaughtExceptionHandler(ctx); &#125; return myUncaughtExceptionHandler; &#125; // 初始化 public void init() &#123; defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler(); Thread.setDefaultUncaughtExceptionHandler(this); &#125; @Override public void uncaughtException(Thread thread, Throwable throwable) &#123; if (throwable == null) &#123; defaultUncaughtExceptionHandler.uncaughtException(thread, throwable); &#125; // 创建集合对象 stringBuilder = new StringBuilder(); // 记录时间 SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd_HH:mm:ss.SSS&quot;, Locale.getDefault()); String date = simpleDateFormat.format(new Date()); addMessage(&quot;崩溃时间&quot;, date); // 记录应用版本信息 try &#123; PackageManager pm = context.getPackageManager(); PackageInfo pi = pm.getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); addMessage(&quot;版本名&quot;, pi.versionName); addMessage(&quot;版本号&quot;, pi.versionCode); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); addMessage(&quot;error&quot;, &quot;记录版本信息失败！&quot; + e.getMessage()); &#125; // 记录设备信息 Field[] fields = Build.class.getDeclaredFields(); for (Field field : fields) &#123; try &#123; field.setAccessible(true); Object obj = field.get(null); if (obj != null) &#123; addMessage(field.getName(), obj); &#125; &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); addMessage(&quot;error&quot;, &quot;记录设备信息失败！&quot; + e.getMessage()); &#125; &#125; // 添加分隔符 addMessage(null, &quot;==============================================================&quot;); addMessage(null, &quot;======================== 崩溃日志 =========================&quot;); addMessage(null, &quot;==============================================================&quot;); // 记录崩溃信息 Writer writer = new StringWriter(); PrintWriter printWriter = new PrintWriter(writer); throwable.printStackTrace(printWriter); Throwable cause = throwable.getCause(); while (cause != null) &#123; cause.printStackTrace(printWriter); cause = cause.getCause(); &#125; printWriter.close(); addMessage(null, writer.toString()); // 生成路径，保存至/Android/data/包名，无需读写权限 try &#123; File root = context.getExternalFilesDir(&quot;log&quot;); String filename = date + &quot;.log&quot;; File file = new File(root, filename); FileOutputStream fos = new FileOutputStream(file); fos.write(stringBuilder.toString().getBytes()); fos.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); defaultUncaughtExceptionHandler.uncaughtException(thread, throwable); &#125; // 启动崩溃异常页面 Intent intent = new Intent(context, UncaughtExceptionActivity.class); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);// 请勿修改，否则无法打开页面 intent.putExtra(&quot;error&quot;, stringBuilder.toString()); context.startActivity(intent); System.exit(1);// 请勿修改，否则无法打开页面 &#125; // 添加数据 private void addMessage(String key, Object obj) &#123; // 对数组做一下处理 if (obj instanceof String[]) &#123; String[] list = (String[]) obj; ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(Arrays.asList(list)); stringBuilder.append(key).append(&quot;=&quot;).append(array.toString()).append(&quot;\\n&quot;); &#125; // 其他的都直接添加 if (key == null) &#123; stringBuilder.append(obj) .append(&quot;\\n&quot;); &#125; else &#123; stringBuilder.append(key) .append(&quot;=&quot;) .append(obj) .append(&quot;\\n&quot;); &#125; &#125;&#125; UncaughtExceptionActivity.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import android.content.Intent;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.widget.ScrollView;import android.widget.TextView;import android.widget.Toast;import androidx.appcompat.app.AppCompatActivity;/** * @ClassName UncaughtExceptionActivity * @Description 异常页面 * @Author summerain0 * @Date 2020/9/12 11:02 */public class UncaughtExceptionActivity extends AppCompatActivity &#123; public static final String TAG = &quot;UncaughtExceptionActivity&quot;; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); // 读取日志，显示在屏幕上 String msg = getIntent().getStringExtra(&quot;error&quot;); ScrollView scrollView = new ScrollView(this);// 防止日志太长看不完 scrollView.setLayoutParams(new ScrollView.LayoutParams(ScrollView.LayoutParams.MATCH_PARENT, ScrollView.LayoutParams.MATCH_PARENT)); TextView textView = new TextView(this); textView.setText(msg); scrollView.addView(textView); setContentView(scrollView); &#125; @Override public boolean onCreateOptionsMenu(Menu menu) &#123; menu.add(0, 0, 0, &quot;重启&quot;).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM); menu.add(0, 1, 0, &quot;上传&quot;).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM); return super.onCreateOptionsMenu(menu); &#125; @Override public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId()) &#123; case 0: Intent intent = new Intent(this, MainActivity.class); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);// 请勿修改，否则无法打开页面 startActivity(intent); System.exit(1);// 请勿修改，否则无法打开页面 case 1: // 这里自己写上传逻辑 Toast.makeText(this, &quot;已上传！&quot;, Toast.LENGTH_SHORT).show(); &#125; return true; &#125;&#125; MyApplication.java123456789101112131415161718import android.app.Application;/** * @ClassName MyApplication * @Description TODO * @Author summerain0 * @Date 2020/9/11 14:00 */public class MyApplication extends Application &#123; public static final String TAG = &quot;MyApplication&quot;; @Override public void onCreate() &#123; super.onCreate(); // 初始化异常处理器 MyUncaughtExceptionHandler.getInstance(MyApplication.this).init(); &#125;&#125; AndroidManifest.xml123456789&lt;application android:name=&quot;.MyApplication&quot; ......&gt; &lt;activity android:label=&quot;崩溃异常&quot; android:name=&quot;.UncaughtExceptionActivity&quot; /&gt;&lt;/application&gt;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"教程/Android","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://summerain0.github.io/tags/Android/"}]},{"title":"自定义全局异常捕捉——保存至本地","slug":"file-uncaught-exception","date":"2022-09-03T15:57:30.000Z","updated":"2022-09-03T16:03:34.516Z","comments":true,"path":"2022/09/03/file-uncaught-exception/","link":"","permalink":"https://summerain0.github.io/2022/09/03/file-uncaught-exception/","excerpt":"","text":"前言开发安卓的小伙伴都遇到过APP突然崩溃,无响应的情况.如果发生在自己手中,那么还可以通过IDE查看错误日志,但是实际都是发生在用户手中,那么这个时候产生崩溃,无响应ANR异常就很麻烦.无从下手.因此,需要全局异常捕获.也就是对未知异常,程序员没有处理的异常进行处理,记录等便于分析查找原因. 源码MyUncaughtExceptionHandler.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Build;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintWriter;import java.io.StringWriter;import java.io.Writer;import java.lang.reflect.Field;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.Locale;/** * @ClassName MyUncaughtExceptionHandler * @Description 全局捕捉异常 * @Author summerain0 * @Date 2020/9/11 15:31 */public class MyUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler &#123; // 单例 private static MyUncaughtExceptionHandler myUncaughtExceptionHandler; // 上下文 private Context context; // 会输出到文件中 private StringBuilder stringBuilder; // 系统异常处理器 private Thread.UncaughtExceptionHandler defaultUncaughtExceptionHandler; public MyUncaughtExceptionHandler(Context context) &#123; this.context = context; &#125; // 获取单例 public static synchronized MyUncaughtExceptionHandler getInstance(Context ctx) &#123; if (myUncaughtExceptionHandler == null) &#123; myUncaughtExceptionHandler = new MyUncaughtExceptionHandler(ctx); &#125; return myUncaughtExceptionHandler; &#125; // 初始化 public void init() &#123; defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler(); Thread.setDefaultUncaughtExceptionHandler(this); &#125; @Override public void uncaughtException(Thread thread, Throwable throwable) &#123; if (throwable == null) &#123; defaultUncaughtExceptionHandler.uncaughtException(thread, throwable); &#125; // 创建集合对象 stringBuilder = new StringBuilder(); // 记录时间 SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd_HH:mm:ss.SSS&quot;, Locale.getDefault()); String date = simpleDateFormat.format(new Date()); addMessage(&quot;崩溃时间&quot;, date); // 记录应用版本信息 try &#123; PackageManager pm = context.getPackageManager(); PackageInfo pi = pm.getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); addMessage(&quot;版本名&quot;, pi.versionName); addMessage(&quot;版本号&quot;, pi.versionCode); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); addMessage(&quot;error&quot;, &quot;记录版本信息失败！&quot; + e.getMessage()); &#125; // 记录设备信息 Field[] fields = Build.class.getDeclaredFields(); for (Field field : fields) &#123; try &#123; field.setAccessible(true); Object obj = field.get(null); if (obj != null) &#123; addMessage(field.getName(), obj); &#125; &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); addMessage(&quot;error&quot;, &quot;记录设备信息失败！&quot; + e.getMessage()); &#125; &#125; // 添加分隔符 addMessage(null, &quot;==============================================================&quot;); addMessage(null, &quot;======================== 崩溃日志 =========================&quot;); addMessage(null, &quot;==============================================================&quot;); // 记录崩溃信息 Writer writer = new StringWriter(); PrintWriter printWriter = new PrintWriter(writer); throwable.printStackTrace(printWriter); Throwable cause = throwable.getCause(); while (cause != null) &#123; cause.printStackTrace(printWriter); cause = cause.getCause(); &#125; printWriter.close(); addMessage(null, writer.toString()); // 生成路径，保存至/Android/data/包名，无需读写权限 try &#123; File root = context.getExternalFilesDir(&quot;log&quot;); String filename = date + &quot;.log&quot;; File file = new File(root, filename); FileOutputStream fos = new FileOutputStream(file); fos.write(stringBuilder.toString().getBytes()); fos.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); defaultUncaughtExceptionHandler.uncaughtException(thread, throwable); &#125; &#125; // 添加数据 private void addMessage(String key, Object obj) &#123; // 对数组做一下处理 if (obj instanceof String[]) &#123; String[] list = (String[]) obj; ArrayList&amp;lt;String&amp;gt; array = new ArrayList&amp;lt;&amp;gt;(Arrays.asList(list)); stringBuilder.append(key).append(&quot;=&quot;).append(array.toString()).append(&quot;\\n&quot;); &#125; // 其他的都直接添加 if (key == null) &#123; stringBuilder.append(obj) .append(&quot;\\n&quot;); &#125; else &#123; stringBuilder.append(key) .append(&quot;=&quot;) .append(obj) .append(&quot;\\n&quot;); &#125; &#125;&#125; MyApplication.java123456789101112131415161718import android.app.Application;/** * @ClassName MyApplication * @Description TODO * @Author summerain0 * @Date 2020/9/11 14:00 */public class MyApplication extends Application &#123; public static final String TAG = &quot;MyApplication&quot;; @Override public void onCreate() &#123; super.onCreate(); // 初始化异常处理器 MyUncaughtExceptionHandler.getInstance(MyApplication.this).init(); &#125;&#125; AndroidManifest.xml1234&lt;application android:name=&quot;.MyApplication&quot; ....&gt;&lt;/application&gt;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"教程/Android","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://summerain0.github.io/tags/Android/"}]},{"title":"还在用老办法获取版本号或者签名信息吗？不如试试PackageInfoCompat吧！","slug":"android-package-info-compat","date":"2022-09-03T14:14:20.000Z","updated":"2022-09-03T15:41:07.406Z","comments":true,"path":"2022/09/03/android-package-info-compat/","link":"","permalink":"https://summerain0.github.io/2022/09/03/android-package-info-compat/","excerpt":"","text":"前言之前的很久时间，我们都是使用以下的方式获取应用的版本号，但在Android SDK 28中，谷歌弃用了该方式，推荐使用getLongVersionCode() 12345678910public int getSelfVersionCode(Context context)&#123; try &#123; PackageManager packageManager = context.getPackageManager(); PackageInfo info = packageManager.getPackageInfo(context.getPackageName(),0); return info.versionCode; &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); return -1; &#125;&#125; 但 getLongVersionCode() 仅限API28及以上使用，所以我们需要判断版本号并做出对应处理。 那么，我们可以一步到位吗？ 答案是可以的！ PackageInfoCompat引入依赖12345// Androidximplementation &#x27;androidx.appcompat:appcompat:1.3.0-rc01&#x27;// Android Supportimplementation &#x27;com.android.support:appcompat-v7:28.0.0&#x27; What is PackageInfoCompat？PackageInfoCompat顾名思义，是用来代替PackageInfo部分功能的，里面仅包含三个静态方法 修饰符 方法参数 方法作用 static Long getLongVersionCode( info: PackageInfo) 返回版本号 static MutableList&lt;Signature!&gt; getSignatures( packageManager: PackageManager, packageName: String) 获取签名数组 static Boolean hasSignatures( packageManager: PackageManager, packageName: String,certificatesAndType: MutableMap&lt;ByteArray!, Int!&gt;, matchExact: Boolean) 检查设备上的包是否包含一组证书。 使用getLongVersionCode - 获取版本号，内部实现其实与上文提到的方法无异 JavaKotlin内部实现12345678910public long getSelfVersionCode(Context context) &#123; try &#123; PackageManager packageManager = context.getPackageManager(); PackageInfo info = packageManager.getPackageInfo(context.getPackageName(), 0); return PackageInfoCompat.getLongVersionCode(info); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); return -1; &#125;&#125;12345fun getSelfVersionCode(context: Context): Long &#123; val packageManager = context.packageManager val info = packageManager.getPackageInfo(context.packageName, 0) return PackageInfoCompat.getLongVersionCode(info)&#125;1234567@SuppressWarnings(&quot;deprecation&quot;)public static long getLongVersionCode(@NonNull PackageInfo info) &#123; if (Build.VERSION.SDK_INT &gt;= 28) &#123; return info.getLongVersionCode(); &#125; return info.versionCode;&#125; getSignatures - 获取应用签名， signatures 在SDK28中被 signingInfo 替代 JavaKotlin1234567891011121314151617181920public String getSelfSignToSHA1(Context context) &#123; try &#123; PackageManager packageManager = context.getPackageManager(); List&lt;Signature&gt; signatureList = PackageInfoCompat.getSignatures(packageManager,context.getPackageName()); byte[] cert = signatureList.get(0).toByteArray(); MessageDigest md = MessageDigest.getInstance(&quot;SHA1&quot;); byte[] publicKey = md.digest(cert); StringBuilder hexString = new StringBuilder(); for (int i = 0; i &lt; publicKey.length; i++) &#123; String appendString = Integer.toHexString(0xFF &amp; publicKey[i]).toUpperCase(Locale.US); if (appendString.length() == 1)hexString.append(&quot;0&quot;); hexString.append(appendString); if (i != publicKey.length - 1) hexString.append(&quot;:&quot;); &#125; return hexString.toString(); &#125; catch (Exception e) &#123; e.printStackTrace(); return null; &#125;&#125;12345678910111213141516fun getSelfSign(context: Context): String &#123; val packageManager = context.packageManager val signatures = PackageInfoCompat.getSignatures(packageManager, context.packageName) val bytes = signatures[0].toByteArray() val messageDigest = MessageDigest.getInstance(&quot;SHA1&quot;) val publicKey: ByteArray = messageDigest.digest(bytes) val hexString = StringBuilder() for (i in publicKey.indices) &#123; val appendString = Integer.toHexString(0xFF and publicKey[i].toInt()) .toUpperCase(Locale.US) if (appendString.length == 1) hexString.append(&quot;0&quot;) hexString.append(appendString) if (i != publicKey.size - 1) hexString.append(&quot;:&quot;) &#125; return hexString.toString()&#125;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"教程/Android","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://summerain0.github.io/tags/Android/"}]},{"title":"Android Compose - 官方SwipeRefreshLayout（下拉刷新）","slug":"jetpack-compose-swipe-refresh-layout","date":"2022-09-03T11:05:11.000Z","updated":"2022-09-03T14:12:46.708Z","comments":true,"path":"2022/09/03/jetpack-compose-swipe-refresh-layout/","link":"","permalink":"https://summerain0.github.io/2022/09/03/jetpack-compose-swipe-refresh-layout/","excerpt":"","text":"Demo 引入依赖1234567repositories &#123; mavenCentral()&#125;dependencies &#123; implementation &quot;com.google.accompanist:accompanist-swiperefresh:&lt;version&gt;&quot;&#125; 使用方法1234567891011121314151617181920212223242526272829303132class MyViewModel : ViewModel() &#123; private val _isRefreshing = MutableStateFlow(false) val isRefreshing: StateFlow&lt;Boolean&gt; get() = _isRefreshing.asStateFlow() fun refresh() &#123; viewModelScope.launch &#123; // 延迟2秒 _isRefreshing.emit(true) delay(2000) _isRefreshing.emit(false) &#125; &#125;&#125;@Composablefun SwipeRefreshSample() &#123; val viewModel: MyViewModel = viewModel() val isRefreshing by viewModel.isRefreshing.collectAsState() SwipeRefresh( state = rememberSwipeRefreshState(isRefreshing), onRefresh = &#123; viewModel.refresh() &#125;, ) &#123; LazyColumn &#123; items(30) &#123; index -&gt; // item列表 &#125; &#125; &#125;&#125;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"Jetpack Compose","slug":"教程/Jetpack-Compose","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/Jetpack-Compose/"}],"tags":[{"name":"Jetpack Compose","slug":"Jetpack-Compose","permalink":"https://summerain0.github.io/tags/Jetpack-Compose/"}]},{"title":"SpringBoot的MyBatis简单配置","slug":"springboot-mybatis-config","date":"2022-09-03T05:58:01.000Z","updated":"2022-09-03T15:59:26.841Z","comments":true,"path":"2022/09/03/springboot-mybatis-config/","link":"","permalink":"https://summerain0.github.io/2022/09/03/springboot-mybatis-config/","excerpt":"","text":"1. 引入依赖1.1 修改pom.xml123456789101112&lt;!-- mysql 驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.29&lt;/version&gt;&lt;/dependency&gt;&lt;!-- Mybatis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.2.2&lt;/version&gt;&lt;/dependency&gt; 1.2 修改配置 application.yml123mybatis: mapper-locations: classpath:mapping/*Mapper.xml type-aliases-package: com.summerain0.cloud.common.core.domain.entity 参数讲解注意 mapper-locations 表示映射文件储存的地方，例如 classpath:mapping&#x2F;*Mapper.xml 指代resources文件夹下mapping里所有Mapper.xml结尾的文件type-aliases-package 是实体类所在的位置 自此，MyBatis的引入完成 2. 小小的例子2.1 建立实体类1234567891011import lombok.Data;import lombok.ToString;@Data@ToStringpublic class SysUser &#123; private Integer id; private String username; private String password; private String nick;&#125; 2.2 建立映射类1234@Repositorypublic interface UserMapper &#123; SysUser findById(int id);&#125; 同时在resources的mapping文件里建立一个和映射类同名的xml文件 123456789101112131415161718&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.summerain0.cloud.system.mapper.UserMapper&quot;&gt; &lt;resultMap id=&quot;SysUser&quot; type=&quot;com.summerain0.cloud.common.core.domain.entity.SysUser&quot;&gt; &lt;result column=&quot;id&quot; jdbcType=&quot;INTEGER&quot; property=&quot;id&quot;/&gt; &lt;result column=&quot;username&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;username&quot;/&gt; &lt;result column=&quot;password&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;password&quot;/&gt; &lt;result column=&quot;nick&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;nick&quot;/&gt; &lt;/resultMap&gt; &lt;select id=&quot;findById&quot; resultType=&quot;com.summerain0.cloud.common.core.domain.entity.SysUser&quot;&gt; select * from sys_user where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 2.3 建立测试方法123456789101112131415161718public interface UserService &#123; SysUser findById(int id);&#125;@Servicepublic class IUserService implements UserService &#123; private UserMapper userMapper; @Override public SysUser findById(int id) &#123; return userMapper.findById(id); &#125; @Autowired public void setUserMapper(UserMapper userMapper) &#123; this.userMapper = userMapper; &#125;&#125; 2.4 提供接口1234567891011121314@RestControllerpublic class TestController &#123; private IUserService userService; @RequestMapping(&quot;/test&quot;) public String test() &#123; return userService.findById(3).toString(); &#125; @Autowired public void setUserService(IUserService userService) &#123; this.userService = userService; &#125;&#125; 2.5 测试结果运行结果 3. 常见问题3.1 找不到Mapper？在启动类加入@MapperScan(“com.summerain0.cloud.system.mapper”)即可 1234567@MapperScan(&quot;com.summerain0.cloud.system.mapper&quot;)@SpringBootApplicationpublic class CloudApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(CloudApplication.class, args); &#125;&#125;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"SpringBoot","slug":"教程/SpringBoot","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/SpringBoot/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://summerain0.github.io/tags/SpringBoot/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://summerain0.github.io/tags/MyBatis/"}]},{"title":"什么？你是学生？还不快来白嫖JetBrains全家桶？","slug":"jetbrains-education-license","date":"2022-09-02T12:28:29.000Z","updated":"2022-09-04T06:04:38.386Z","comments":true,"path":"2022/09/02/jetbrains-education-license/","link":"","permalink":"https://summerain0.github.io/2022/09/02/jetbrains-education-license/","excerpt":"","text":"前言白嫖原理是JetBrains为学生提供的免费许可证，本篇文章使用学信网进行获取免费的许可证 准备工作学信网获取学籍验证报告 登录学信网，没有账号的请自行注册 学信网登录页面 申请验证报告，完成后结果应和下图差不多一致 申请验证报告 下载验证报告备用 申请许可证 进入免费许可证申请页面 申请教育许可证https://www.jetbrains.com/shop/eform/students 填写相关信息（图片约334k，请耐心等待加载） 教程图片 大约一到三周即可收到邮件（最快次日即可收到） 申请成功通知邮件 注册JetBrains账号（已注册可省略此步骤）注册JetBrains账号https://account.jetbrains.com/login PS：注意使用申请时填写的邮箱，注册后会自动绑定许可证 使用许可证Help -&gt; Register -&gt; 输入账号密码确认即可 IDEA许可证页面IDEA已许可页面 注意事项许可证适用于JetBrains全家桶申请后许可证有效期为一年，可重复申请白嫖可白嫖的软件，建议下载JetBrains ToolBox进行管理AppCodeCLionDataGripdotCoverdotMemorydotTraceGoLandIntelliJ IDEA UltimatePhpStormPyCharmReSharperReSharper C++RiderRubyMineWebStorm","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"JetBrains","slug":"JetBrains","permalink":"https://summerain0.github.io/tags/JetBrains/"},{"name":"白嫖","slug":"白嫖","permalink":"https://summerain0.github.io/tags/%E7%99%BD%E5%AB%96/"}]}],"categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"教程/Android","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/Android/"},{"name":"Material Design","slug":"教程/Android/Material-Design","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/Android/Material-Design/"},{"name":"Jetpack Compose","slug":"教程/Jetpack-Compose","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/Jetpack-Compose/"},{"name":"SpringBoot","slug":"教程/SpringBoot","permalink":"https://summerain0.github.io/categories/%E6%95%99%E7%A8%8B/SpringBoot/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://summerain0.github.io/tags/Android/"},{"name":"Material Design","slug":"Material-Design","permalink":"https://summerain0.github.io/tags/Material-Design/"},{"name":"Button","slug":"Button","permalink":"https://summerain0.github.io/tags/Button/"},{"name":"Jetpack Compose","slug":"Jetpack-Compose","permalink":"https://summerain0.github.io/tags/Jetpack-Compose/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://summerain0.github.io/tags/SpringBoot/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://summerain0.github.io/tags/MyBatis/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://summerain0.github.io/tags/JetBrains/"},{"name":"白嫖","slug":"白嫖","permalink":"https://summerain0.github.io/tags/%E7%99%BD%E5%AB%96/"}]}